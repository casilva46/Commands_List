
PYTHON

- Lançado em 1991 na Holanda por Guido Van Rossun
- Linguagem orientada a objetos
- Linguagem interpretativa (necessita de um interpretador, usar o anaconda)
- Python 2 (mais antigo)
- Python 3 (mais recente, sempre usar esse)

Download do Anaconda: https://repo.continuum.io/archive

python --version						Verifica a versão do Python (CMD)
pip --version							Verifica a versão do pip instalados de pacotes do python (CMD)

JUPITER NOTEBOOK

No cmd digite o comando jupyter notebook para inicializar os notebooks,  geralmente ele abre no MS Edge

No CMD digite python para abrir a cli do python
exit () 		 (sair do prompt de comando do python)

Teclas de atalho. Modo de Comando (pressione Esc para ativar)

Atalho			Ação
A				Inserir célula acima
B				Inserir célula abaixo
C				Copiar célula
V				Colar célula
D, D			Apagar célula
Z				Desfazer exclusão de célula
M				Transformar célula em Markdown
Y				Transformar célula em código
Shift + ↑ / ↓	Selecionar múltiplas células
Ctrl + Enter	Executar célula
Shift + Enter	Executar e ir para a próxima
Alt + Enter		Executar e inserir nova célula abaixo

Modo de Edição (pressione Enter para ativar)

Atalho			Ação
Ctrl + Enter	Executar a célula
Shift + Enter	Executar e ir para a próxima
Alt + Enter		Executar e inserir nova célula
Ctrl + /		Comentar/descomentar linha(s)
Esc				Sair do modo de edição

Formatação de Textos no Jupiter Notebook

*Fonte Itálico*
**Fonte em negrito**
***Fonte em Negrito + Itálico***

Tamanho da fonte

# Título grande (fonte muito grande)
## Título médio
### Título menor

## **Relatório de Funcionários**    - Exemplo combinado


<u>Texto sublinhado</u>
<center>Texto centralizado</center>
~~Texto Riscado~~
x<sup>Texto Sobrescrito</sup>
x<sub>Texto Subescrito</sup>

>Bloco principal
>>Bloco secundário
>>>Bloco terciário

Ajuste de largura e cores de uma linha
<hr style="border: 2x solid green;">


Video para solucionar problemas com o terminal do Python: https://www.youtube.com/watch?v=OTA3-xxpZuY 

Primeiro Projeto

C:\Users\casil\PycharmProjects\PythonDSA

Para abrir o Jupyter Notebook (abrir o CMD e executar a linha abaixo) geralmente ele abre no MS Edge


(base) C:\Users\casil>cd C:\Users\casil\Documents\PYTHON\PythonScripts\Cap01

(base) C:\Users\casil\Documents\PYTHON\PythonScripts\Cap01>jupyter notebook


cd C:\Users\casil\Documents\PYTHON\PythonScripts\Cap01> jupyter notebook

-----------------------------------------------------------------------------------------------------------------------------------------------------------sSTRINGS

- Strings são Variáveis que armazenam cadeia de caracteres como nomes e textos em geral. As strings devem sempre estar delimitadas por aspas duplas "". 
	EX: "João e Maria comem pão" 
	
len ("Stirng")								Informa o tamanho de uma string

- Para acessar os caracteres de uma string, devemos informar o seu indice entre concheres []. 
EX: 

a = "ABCD"
a[0]
A 

- As variaveis do tipo string suportam operações como fatiamento, concatenação e composição. Para concatenar duas strings utilizamos o operador de adição +

- CONCATENAÇÃO:
EX:

s = "ABC"
s + "D"
ABCD

--------

s + E * 4
ABCDEEEE

--------

"X" + "-" * 10 + "X"
X----------X

---------------

a + "x4 =" + a * 4
"ABCDx4 = ABCDABCDABCDABCD"

- COMPOSIÇÃO: 
EX:

"João tem %d anos" % X							(OBS: %d é o marcador de posição)

---------------

idade = 22
"[%d]" % idade
22

- FATIAMENTO 								OBS: no fatiamento a ultima posição informada não é considerada
EX:

s = "ABCDEFGHI"
s = [0:2]
Saída: AB

s[1:2]
Saída: B

------------------------------------------------------------------------------------------------------------------------------------------------------------

ENTRADA DE DADOS

- input: a função input é utilizada para se solicitar a entrada de dados aos usuários

EX: 

x = input("Digite um número")
print(x)

----------------------------

Nome = input("Digite um nome:")
print(f"Você Digitou {Nome}")
print(f"Olá, {Nome}")

CONVERSÃO DA ENTRADA DE DADOS

Anos = int(input("Digite os anos de serviço": ))
Valor_Ano = float(input("Digite o valor por ano de serviço": ))
Total_Bonus = Anos * Valor_Ano
print(f"Bônus de R$ {Total_Bonus:5.2f}")


------------------------------------------------------------------------------------------------------------------------------------------------------------

CONDIÇÕES
	As condições servem para selecionar qdo uma parte do programa deve ser ativada e qdo deve ser ignorada. 

- IF 
	Se a condição for verdadeira faça algo. 
	
EX: Código que lê dois valores e imprime qual é o maior.

	a = int(input("Digite o primeiro valor")
	b = int(input("Digite o segundo valor")
	if a > b:
		print("O primeiro valor é maior")
	if b > a:
		print("O segundo valor é maior")
		
		
EX: Código que determina se o carro é velho ou novo depende do ano

	ano = int(input("Digite o ano de fabricação do seu carro: "))
	if ano >= 2020:
		print ("Seu carro está novo")
	if ano < 2020:
		print ("Seu carro é velho")
		
----------------------------------------------------------------------------------------

- ELSE

EX:  Código que determina se o carro é velho ou novo depende do ano, usando a condição else

	ano = int(input("Digite o ano de fabricação do seu carro: "))
	if ano >= 2020:
		print ("Seu carro está novo")
	else:
		print ("Seu carro é velho")
		
----------------------------------------------------------------------------------------

- ESTRUTURAS ANINHADAS
	Nem sempre os programas são simples e em alguns casos precisamos aninhar vários IFs para obter o comportamento desejado. Aninhar significa colocar um IF dentro de outro.
	
EX: Conta de telefone com 03 faixas de tarifação

	minutos = int(input("Quantos minutos foram utilizados no mês: "))
	if minutos < 200:
		preco = 0.20
	else:
		if minutos < 400:
			preco = 0.18
		else:
			preco = 0.15
	print(f"Você irá pagar este mês: R$ {minutos * preco:6.2f}")
	
----------------------------------------------------------------------------------------

- CONDIÇÃO ELIF
	O Python apresenta uma solução para o problema de vários IFs aninhados. A clausula ELIF substitui um par de IF e ELSE sem criar outro nível de estrutura, evitando assim deslocamentos desnecessários a direita.

EX: Categoria x preço, usando elif

	categoria = int(input("Digite a categoria do produto: "))
	if categoria == 1:
		preco = 10
	elif categoria == 2:
		preco = 18
	elif categoria == 3:
		preco = 23
	elif categoria == 4:
		preco = 26
	elif categoria == 5:
		preco = 31
	else:
		print("Categotia inválida, digite um valor entre 1 e 5!")
		preco = 0
	print(f"O preço do produto é: R${preco:6.2f}")
	
------------------------------------------------------------------------------------------------------------------------------------------------------------

- ESTRUTURAS DE REPETIÇÃO

- WHILE

EX: 

	x = 1
	while x <= 100:
		print(x)
		x = x + 1
		
----------------------------------------------------------------------------------------

- CONTADORES

EX: Ultimo número a imprimir sendo fornecido pelo usuário.

	fim = int(input("Digite o número para imprimir:" ))
	x = 1
		while x <= fim:
		print(x)
		x = x + 1
		
EX: 

	fim = int(input("Digite o número para imprimir:" ))
	x = 0
	while x <= fim:
		if x % 2 == 0:
			print(x)
			x = x + 1
		

 


f-strings

faturamento = 1000
print(f"faturamento: {faturamento}")

#Formantando com casa decimal 

print(f"faturamento: {faturamento: .2f}")

#Formantando moeda

print(f"faturamento: R$ {faturamento: ,.2f}")
faturamento: R$  1,000.00

# Podemos usar >,< ou ^ para alinha valores a esquerda, direita ou ao centro

print(f"faturamento: R$ {faturamento:>5.2f}") # > alinhamento a direita

print(f"faturamento: R$ {faturamento:<5.2f}") # < alinhamento a esquerda

print(f"faturamento: R$ {faturamento:^5.2f}") # ^ alinhamento ao centro

# Também podemos especificar qual caracteres podem ser utilizados para preencher os espaços em branco. 

print(f"faturamento: R${faturamento:.^20.2f}") # com pontos ....
faturamento: R$......1000.00.......

print(f"faturamento: R${faturamento:x^20.2f}") # com xxx
faturamento: R$xxxxxx1000.00xxxxxxx

print(f"faturamento: R${faturamento:_^20.2f}") # com _
faturamento: R$______1000.00_______

-----------------------------------------------------------------------------------------------------------------------------------------
Operadores

Operador						Conceito																			Exemplo
+ (Adição ou sinal positivo)	Realiza a soma entre operandos - Adiciona o sinal de positivo ao número	- 			10 + 7 
- (Subtração ou sinal negativo)	Realiza a subtração entre operandos - Adiciona o sinal de negativo ao número	 	10 - 7
* (Multiplicação)				Realiza a multiplicação entre operandos												3 * 4
/ (Divisão)						Realiza a divisão entre operandos													10 / 5
// (Divisão inteira)			Realiza a divisão entre operandos e a parte decimal do resultado					10 // 6
% (Módulo)						Retorna o resto da divisão entre operandos											4 % 2
** (Exponenciação)				Retorna um número elevado a potência de outro										4 ** 2

Operadores de atribuição especiais (equivalência)

Operador						Exemplo					Equivalente a
=								x = 1					x = 1
+=								x += 1					x = x + 1
-=								x -= 1					x = x - 1
*=								x *= 1					x = x * 1
**=								x **=2					x = x **2
/=								x /= 1					x = x / 1
//=								x //=4					x = x //4
%=								x %= 1					x = x % 1

Operadores de comparação (relacionais)

Operador						Conceito																			Exemplo
>(Maior que)					Verifica se um valor é maior que outro												x > 5
<(Menor que)					Verifica se um valor é menor que outro												x < 5
== (Igual a)					Verifica se um valor é igual a outro												x == 5
!= (Diferente de)				Verifica se um valor é diferente de outro											x != 5
>= (Maior ou igual a)			Verifica se um valor é maior ou igual a outro										x >= 5
<= (Menor ou igual a)			Verifica se um valor é menor ou igual a outro										x <= 5

Operadores lógicos

Operador						Conceito																			Exemplo
and								Retorna True se todas as condições forem verdadeiras, caso contrário retorna False	x > 1 and x < 5
or								Retorna True se uma das condições for verdadeiras, caso contrário retorna False		x > 1 or x < 5
not								Inverte o resultado: se o resultado da expressão for True, o operador retorna false	not(x > 1 and x < 5)

-----------------------------------------------------------------------------------------------------------------------------------------
Marcadores

Marcador						Tipo
%d								Numeros inteiros
%s								Strings
%f								Numeros decimais

EX: 

"[%d]" % X
Saída: [X]

"[%03d]" % X					Representa um número com 03 posicões sendo completado com zero (0) a esquerda
Saída: [0XX]

"[%3d]" % X						Representa um número que ocupa 03 posiçõs sem exibir o zero a esquerda
Saída: [ XX]

"[%-3d]" % X					Representa um número que ocupa 03 posiçõs sem exibir o zero a direita
Saída: [XX ]

"[%5.2f]" % X					Representa qdo precisamos exibir numeros após o ponto (.) 
Saída: 5.00


-----------------------------------------------------------------------------------------------------------------------------------------
Condicionais
If
Else
Elif

-----------------------------------------------------------------------------------------------------------------------------------------
Repetição

while

-----------------------------------------------------------------------------------------------------------------------------------------
Operações com variáveis. 

LISTAS []

Z = [15,8,9]

print(Z)
[15, 8, 9]

print(Z[0])
15

Altera um caracter em uma lista

Z[1] = 3
print(Z)
[15, 3, 9]

-----------------------------------------------------------------------------------------------------------------------------------------

DICIONARIOS {}

-----------------------------------------------------------------------------------------------------------------------------------------

TUPLAS ()








