O que é Controle de Versão de Código?

	Um sistema de controle de versão resolve este tipo de problema, fazendo o “merge" entre as alterações  de forma que ao final tenha-se um arquivo único com todas as alterações.

O Git é atualmente o melhor e mais utilizado sistema de controle de versão de códigos.

Mas existem outros como: 
	- Subversion (SVN); 
	- Mercurial; 
	- Concurrent Versioning System (CVS); 
	- Bazaar;

O que é o Git?
	- Um sistema de controle de versão distribuído
	- SCM - Source Control Management

Durante o desenvolvimento de um software* queremos saber: 
	- O que mudou? 
	- Quando mudou? 
	- Por que mudou? 
	- Quem fez a mudança? 
	- Podemos reproduzir esta mudança?

Tópicos que fazem parte do desenvolvimento de software: 
	- Identificação; 
	- Documentação; 
	- Controle; 
	- Auditoria; 

Fatos que fazem parte no desenvolvimento de software:
	- Código fonte; 
	- Documentação do software; 
	- Manual de usuário; 

Git não é GitHub.

- O Git é um software criado por Linus Torvalds para controle e gerenciamento distribuído de código.
- O GitHub é uma plataforma web que serve como um repositório de código que utiliza recursos do Git para que possamos centralizar nossos repositórios na Internet, fazendo com que possamos ter um portifólio de códigos e projetos que podem ser públicos ou privados.
- O GitHub foi comprado a pouco tempo pela Microsoft.
- É essencial que o desenvolvedor, iniciante ou experiente, tenha uma conta no GitHub e comece a fazer seu 
portifólio de códigos e projetos crescer. É uma das formas que as empresas que contraram desenvolvedores avaliam as qualidades técnicas de um desenvolvedor.

Entendendo como o Git funciona
	
- Por ser um sistema de gerenciamento de controle de versão de código/documentos, o git possui recursos avançados de monitoramento e acompanhamento de arquivos que fazem parte de um projeto.
- Ou seja, após ativo em um projeto, o git começa a monitorar as mudanças ocorridas neste projeto e nos mostra através de um poderoso sistema de estágios (ou fases) em que estágio ou fase se encontram os arquivos.

O ciclo de vida dos status de arquivos no Git
	-  Temos 4 estágios possíveis em que um arquivo pode estar quando faz parte de um projeto:
	- Untracked 	(Não rastreado)
	- Tracked	(rastreado) são conhecidos como "new file"
	- Modified	(modificado)
	- Staged	(Preparado / pronto) são enviados para o repositório através de commits
	
- Um arquivo pode ‘navegar’ por estes estágios por várias vezes durante o processo de desenvolvimento e de acordo com o gerenciamento feito destes arquivos.

Branches
	
- Uma branch é como uma ramificação do seu projeto, uma linha de desenvolvimento paralela. Imagine que você tem um tronco de árvore (a branch principal, geralmente chamada de "main" ou "master") e, a partir dele, surgem vários galhos (as branches).


1º coisa criar o repositório Git no Projeto

ATENÇAO: Todo novo projeto precisa ser iniciado e ter o usuário cadastrado nele.

1º Entrar com as credenciais do usuário
	git config user.name "User"			Registra as credenciais do usuário em um novo repositório (Somente no novo projeto)
	git config user.email "User_email"        	Registra as credenciais do usuário em um novo repositório (Somente no novo projeto)
	
2º Inicializar o projeto
	git init
	
ORDEM para Subir um arquivo ou atualização no Git

- git status
- git add . ou git add <Nome_Arquivo>
- git commit -m "Mensagem"
- git push


Git Commands

git --version									Exibe a versão do Git instalado
git status									Verifica o status do projeto
git init 									inicia o git em um projeto (executado toda a vez que um projeto é iniciado)
git config user.name "User"							Registra as credenciais do usuário em um novo repositório (Somente no novo projeto)
git config user.email "User_email"        					Registra as credenciais do usuário em um novo repositório (Somente no novo projeto)
git config --global user.name "User"
git config --global user.email "User_email"
git add <Nome_Arquivo>								Adiciona um arquivo para ser commitado
git add .									Adiciona todos os arquivos para o commit de uma vez
git commit -m "Meu primeiro commit"						Faz o commit do arquivo(os) e exibe uma mensagem para os outros colaboradores
git log 									Exibe todos os logs de execução 
git log -2									Exibe os últimos 02 logs de execução
git log --oneline								Exibe os logs de forma resumida
git log --oneline -2								Exibe os últimos 02 logs de execução de forma resumida
git log --before="2020-05-16"							Exibe os logs antes da data estipulada
git log --after="2020-05-16" -2							Exibe os logs depois da data estipulada de forma resumida
git log --since="2 days ago"
git log --author="User"								Exibe os logs pelo autor
git checkout <Hash_id>								Volta para um commit especifico
git checkout master								Volta para a Branch Master
git mv New_program_02 New_program_02.py						Renomeia um arquivo existente
git rm New_program_02.py							Remove um arquivo
git diff --staged								Compara o arquivo que está em Staged com o último commit 
git diff ffb5d0e								Compara entre o agora e um commit feito antes
git commit --amend -m "Mensagem"						Faz a correção de uma mensagem 
git restore --staged <Nome_arquivo>						Retira o arquivo do stado de Staged 
git checkout <Nome_arquivo>							Desfaz as ultimas alteraçõe de um arquivo								
git reset HEAD --hard								Desfaz as ultimas alterações em todos os arquivos de uma vez
git branch									Faz a consulta de qtos Bra existem em um projeto. Onde * indica o Branch principal ou onde estamos.
git branch <nome_da_Nova_Branch>						Cria um novo branch
git checkout <nome_da_Branch>							Navega entre as branches
git checkout -b <nome_da_Branch>						Cria um novo branch caso não exista e já muda a navegação direto para ele
git branch -D <nome_da_Branch>							Deleta um branch que não está Mergeado
git branch -d <nome_da_Branch>							Deleta um branch que já foi Mergeado
git merge <nome_da_Branch>							Para fazer o Merge temos que estar na Branch na qual desejamos fazer e então chamar a outra. 
git rebase <nome_da_Branch> 							Serve para verificar a diferença entre os branches
git push									Para que o repositório remoto receba as mudanças realizadas no repositório clone. Push (empurrar / Subir) 
git clone <URL_do_repositório>							Cria um cópia local do repositório remoto
git fetch 				Usado para manter seu repositório local atualizado com as alterações feitas no repositório remoto, sem mesclar automaticamente essas alterações.
git pull									Baixa as alterações do repositório remoto (Soma do git fetch + git merge) (Puxar / Baixar)
git init --bare									Cria um repositório Bare, um repositório bare não possui um diretório de trabalho.	
git remote add origin <URL_do_repositório>					Adiona um repositório remoto no local
git remote -v									Verifica a existencia de um repositório remoto 	
git config credential.helper store						Salva as configurações de user para o repositório do projeto
git clone <URL_do_repositório>							Cria um clone do repositório remoto para a máquina local. 
git rm <nome_do_arquivo>							Apaga um arquivo	