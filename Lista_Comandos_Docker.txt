DOCKER

* Comandos

• docker-compose pull					            Baixar as imagens
• docker image ls					                Listar as imagens
• docker-compose up –d  				            Executar os containers / Iniciar todos os serviços em background (-d)
• docker container ls					            Lista os containers em execução
• docker container -a                               Lista todos os containers (execução, parados, encerrados e com falhas), pode-se usar também -all no final do comando
• docker-compose stop					            Parar os serviços (todos os containers)
• docker-compose start					            Iniciar os serviços (todos os containers)
• docker-compose dowm					            Matar os serviços
• docker volume prune					            Apagar todos os volumes sem uso
• docker container prune                            Apaga todos os containers parados 
• docker system prune --all				            Apagar tudo (image, volume, network)
• docker exec -it <container> bash			        Acesso ao Shell (linux) de um container especifico
• docker exec -it <container> /bin/bash			    Acesso ao Shell (linux) de um container especifico
• docker ps 						                Visualiza todos containers Ativos
• docker ps –a						                Visualiza todos containers Ativos e Parados
• docker exec -it <Container_name> bash             Acessar o terminal interativo do container
• docker stop <Container_name>                      Parar o container
• docker start <Container_name>                     Parar o container
• docker exec -it <container> <comando>		        Executar comandos no container
• docker logs <container>				            Visualizar os logs de um container especifico
• docker-compose logs					            Visualizar os logs de todos os containers
• docker cp <diretório> <container>:/<diretório>  	Enviar arquivos de um container para outro

• docker build -t <Name_Image> .                Execute o comando em um prompt de comando na mesma pasta onde se encontra o arquivo Dockerfile para criar a imagem (OBS o ponto no final faz parte do comando, o nome da imagem deve ser todo em minusculo)

• docker run -dit --name <Container_name> <Name_Image>

EX: docker run -dit --name dsa-container-lab1 dsa-img-lab1

docker run	                Cria e inicia um novo container a partir de uma imagem
-d	                        Executa o container em background (modo detached)
-i	                        Mantém a entrada padrão (stdin) aberta, mesmo sem interação
-t	                        Aloca um terminal TTY para o container
--name dsa-container-lab1	Dá um nome personalizado ao container
dsa-img-lab1	            É o nome da imagem usada para criar o containe


docker run -d -p 8080:80 nginx

docker rm <Container_name>                          Remover o container
docker container rm <container ID>                  Apaga um container pelo numero do ID
docker rm $(docker ps -a -q)                        Para remover todos os containers (inclusive parados)


optionalfeatures.exe (habilita e desabilita recursos do windows)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Imagem - Funciona como se fosse um template (Um pacote pronto para rodar determinado serviço)

Container - Instancia de execução de uma imagem. Podemos criar vários containers a partir de uma única imagem 

Para começar a trabalhar com containers primeiro temos que ter (criar) uma imagem. Não é possivel ter um container sem a imagem. Para isso temos duas opções

    * Buscar uma imagem pronta no docker hub (repositório de imagens). https://hub.docker.com/ 
    * Criar uma imagem do zero com o arquivo Dockerfile

OBS: Usar sempre imagens oficiais (Marcadas na cor verde)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    O Docker funciona como uma plataforma de virtualização baseado em microserviços na qual trabalhamos com máquinas virtuais leves chamadas de containers, permitindo empacotar aplicações com todas as suas dependências em um único pacote isolado do sistema operacional host. Ele foi criado para facilitar o desenvolvimento, a entrega e a execução de aplicações de forma consistente em qualquer ambiente.

    Um container é como uma “mini-máquina virtual”, mas mais leve e rápida, porque não precisa carregar um sistema operacional completo — ele compartilha o kernel do sistema operacional do host, mas isola o processo.

* Arquitetura Interna do Docker

Componente	            Função
Docker Engine	        Serviço principal que executa containers. Inclui daemon, API e CLI.
Dockerfile	            Script com instruções para criar uma imagem (base para o container).
Imagem (Image)	        Snapshot de uma aplicação com todas as dependências.
Container	            Instância em execução de uma imagem.
Docker Hub	            Repositório público (ou privado) de imagens Docker.

    * Docker Engine

        A peça central. Inclui:

        * Docker Daemon (dockerd): serviço que gerencia containers, imagens, volumes e redes. Ele escuta requisições da CLI e da API.
        * Docker CLI (docker): ferramenta de linha de comando que o usuário usa.
        * REST API: interface que permite comunicação entre CLI, ferramentas externas e o daemon.

        [Usuário] ⇄ [CLI] ⇄ [Docker API] ⇄ [Docker Daemon] ⇄ [Container Runtime]

    * Imagens e Dockerfile

    * O que é uma imagem Docker?

        É uma pilha de camadas somente leitura, contendo:

            * Sistema base (ex: ubuntu, alpine)
            * Bibliotecas e dependências (ex: Python, Node)
            * Código da aplicação
            * Configurações

            Exemplo de Dockerfile

            FROM python:3.11         ← base (layer 1)
            COPY . /app              ← cópia de arquivos (layer 2)
            RUN pip install -r ...   ← instalação (layer 3)
            CMD ["python", "app.py"] ← comando de execução (layer 4)

    * Build: Criando a imagem

        docker build -t minha-aplicacao .
        
* O Docker:

1 - Lê o Dockerfile.
2 - Executa cada instrução (como um script).
3 - Cria camadas intermediárias.
4 - Salva a imagem com um hash único.
5 - Armazena localmente em /var/lib/docker/.

* Container: Instanciando a imagem

    Um container é uma instância em tempo de execução de uma imagem. Ele é criado com:

    docker run -d -p 5000:5000 minha-aplicacao

* O Docker faz:

    1 - Verifica a imagem: se não existir localmente, baixa do Docker Hub (ou outro registro).

    2 - Cria um container:

        * Aloca um filesystem com UnionFS (overlay de camadas + layer de escrita).
        * Cria um namespace isolado (processos, rede, usuários, etc.).
        * Define limites com cgroups (CPU, memória, I/O).
        * Atribui uma interface de rede virtual (por padrão, bridge).

    3 - Executa o processo principal da imagem (ex: python app.py).

Quando abrimos o RUN e executamos um hello-world o Docker primeiro procura localmente se a imagem existe, caso a imagem não exista localmente ele irá até o Docker Hub (repositório de imagens na internet) e faz o download da imagem (que é um arquivo). Ele então executa a imagem e cria o container. 
	É possivel criar varios containers a partir de uma unica imagem (template)
	
	Para criar um container precisamos de uma imagem, porém a imagem é independentemente do container
	
	OBS: Não se cria containers para ficar armazenando dados. Caso necessite de armazenamento (persistencia de dados) deve-se criar um volume. 

* Fluxo Completo: Exemplo

    Imagine que você faz:

    docker run -it ubuntu bash

O que acontece:

    1 - Docker verifica se a imagem ubuntu existe.
    2 - Baixa do Docker Hub, se necessário.
    3 - Cria camadas de sistema de arquivos.
    4 - Aloca namespaces e cgroups para o container.
    5 - Inicializa o bash como processo principal.
    6 - Te conecta ao terminal dentro do container.

* Resumo Final

Etapa	            Descrição
Build	            Transforma um Dockerfile em uma imagem com camadas.
Run	                Cria um container com isolamento de processo, rede e sistema.
Isolamento	        Namespaces + cgroups + OverlayFS.
Rede	            Containers podem se comunicar entre si via redes virtuais.
Armazenamento	    Volumes são usados para persistência de dados.

* Diferenças entre VM e Container

Característica	                    Máquina Virtual (VM)	       Docker (Container)
Sistema operacional	                Inclui um SO completo	       Compartilha o SO do host
Consumo de recursos	                Alto	                        Baixo
Velocidade de inicialização	        Lenta	                        Rápida
Isolamento	                        Total (nível de hardware)	    Parcial (nível de processo)


